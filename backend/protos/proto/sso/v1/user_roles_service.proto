syntax = "proto3";

package sso.user_roles_v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "sso.user_roles_v1";

service UserRolesService {
  // Назначение роли пользователю
  rpc AssignRoleToUser(AssignRoleRequest) returns (google.protobuf.Empty);
  // Снятие роли с пользователя
  rpc RevokeRoleFromUser(RevokeRoleRequest) returns (google.protobuf.Empty);
  // Проверка наличия роли у пользователя
  rpc CheckUserRole(CheckUserRoleRequest) returns (CheckUserRoleResponse);
  // Получение ролей пользователя
  rpc GetUserRoles(GetUserRolesRequest) returns (GetUserRolesResponse);
  // Получение пользователей с определенной ролью
  rpc GetUsersWithRole(GetUsersWithRoleRequest) returns (GetUsersWithRoleResponse);
}

message AssignRoleRequest {
  string user_id = 1;
  string role_id = 2;
}

message RevokeRoleRequest {
  string user_id = 1;
  string role_id = 2;
}

message CheckUserRoleRequest {
  string user_id = 1;
  string role_id = 2;
  string client_id = 3;
}

message CheckUserRoleResponse {
  bool has_role = 1;
}

message GetUserRolesRequest {
  string user_id = 1;
  string client_id = 2;
  string app_id = 3;
  optional bool include_deleted = 4;
}

message RoleAssignment {
  string role_id = 1;
  string role_name = 2;
  string app_id = 3;
  google.protobuf.Timestamp assigned_at = 4;
}

message GetUserRolesResponse {
  repeated RoleAssignment assignments = 1;
}

message GetUsersWithRoleRequest {
  string role_id = 1;
  string client_id = 2;
  optional int64 page_size = 3;
  optional int64 page_token = 4;
}

message UserRoleInfo {
  string user_id = 1;
  string email = 2;
  google.protobuf.Timestamp assigned_at = 3;
}

message GetUsersWithRoleResponse {
  repeated UserRoleInfo users = 1;
  int64 next_page_token = 2;
}
