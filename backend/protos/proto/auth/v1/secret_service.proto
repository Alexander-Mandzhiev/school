syntax = "proto3";

package secrets.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "secrets.v1";

service SecretsService {
  rpc CreateSecret(CreateSecretRequest) returns (Secret) {
    option (google.api.http) = {
      post: "/v1/secrets"
      body: "*"
    };
  }
  rpc RotateSecret(SecretRequest) returns (Secret) {
    option (google.api.http) = {
      post: "/v1/secrets/{id}/rotate"
      body: "*"
    };
  }
  rpc GetSecret(SecretRequest) returns (Secret) {
    option (google.api.http) = {
      get: "/v1/secrets/{id}"
    };
  }
  rpc ListActiveSecrets(ListActiveSecretsRequest) returns (ListSecretsResponse) {
    option (google.api.http) = {
      get: "/v1/client-apps/{client_app_id}/secrets"
    };
  }

  rpc RevokeSecret(SecretRequest) returns (Secret) {
    option (google.api.http) = {
      post: "/v1/secrets/{id}/revoke"
      body: "*"
    };
  }
  rpc HardDeleteSecret(SecretRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/secrets/{id}/hard"
    };
  }
  rpc SoftDeleteSecret(SecretRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/secrets/{id}"
    };
  }

  // Работа с JWT
  rpc GenerateJWT(GenerateJWTRequest) returns (GenerateJWTResponse) {
    option (google.api.http) = {
      post: "/v1/secrets/jwt/generate"
      body: "*"
    };
  }
  rpc RefreshJWT(RefreshJWTRequest) returns (GenerateJWTResponse) {
    option (google.api.http) = {
      post: "/v1/secrets/jwt/refresh"
      body: "*"
    };
  }
  rpc ValidateJWT(ValidateJWTRequest) returns (ValidateJWTResponse) {
    option (google.api.http) = {
      post: "/v1/secrets/jwt/validate"
      body: "*"
    };
  }
}

message CreateSecretRequest {
  string client_app_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
  }];
  string secret_type = 2 [(validate.rules).string = {
    in: ["access", "refresh"]
  }];
  string algorithm = 3 [(validate.rules).string = {
    in: ["RS256", "HS256", "ES256"]
  }];
}

message SecretRequest {
  string id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
  }];
}

message Secret {
  string id = 1;
  int64 internal_id = 2;
  string client_app_id = 3 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
  }];
  string secret_type = 4 [(validate.rules).string = {
    in: ["access", "refresh"]
  }];
  string algorithm = 5 [(validate.rules).string = {
    in: ["RS256", "HS256", "ES256"]
  }];
  int32 key_version = 6;
  google.protobuf.Timestamp created_at = 7;
  optional google.protobuf.Timestamp revoked_at = 8;
}

message ListActiveSecretsRequest {
  string client_app_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
  }];
  optional string secret_type = 2 [(validate.rules).string = {
    in: ["access", "refresh"]
  }];
  optional int32 page_size = 3 [(validate.rules).int32 = {
    gte: 1,
    lte: 100
  }];
  optional int64 page_token = 4;
}

message ListSecretsResponse {
  repeated Secret secrets = 1;
  int64 next_page_token = 2;
  int32 total_size = 3;
}

message GenerateJWTRequest {
  string client_app_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
  }];
  string user_id = 2 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
  }];
  optional google.protobuf.Timestamp access_token_exp = 3;
  optional google.protobuf.Timestamp refresh_token_exp = 4;
}

message ValidateJWTRequest {
  string token = 1 [(validate.rules).string.min_len = 1];
}

message ValidateJWTResponse {
  bool is_valid = 1;
  string client_app_id = 2;
  string user_id = 3;
  google.protobuf.Timestamp expires_at = 4;
}

message RefreshJWTRequest {
  string refresh_token = 1 [(validate.rules).string.min_len = 1];
}

message GenerateJWTResponse {
  string access_token = 1;
  string refresh_token = 2;
}
