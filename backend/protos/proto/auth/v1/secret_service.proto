syntax = "proto3";

package secrets.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "secrets.v1";

service SecretsService {
  rpc CreateSecret(CreateSecretRequest) returns (Secret);
  rpc RotateSecret(SecretRequest) returns (Secret);
  rpc GetSecret(SecretRequest) returns (Secret);
  rpc ListActiveSecrets(ListActiveSecretsRequest) returns (ListSecretsResponse);

  rpc RevokeSecret(SecretRequest) returns (Secret);
  rpc HardDeleteSecret(SecretRequest) returns (google.protobuf.Empty);
  rpc SoftDeleteSecret(SecretRequest) returns (google.protobuf.Empty);

  // Работа с JWT
  rpc GenerateJWT(GenerateJWTRequest) returns (GenerateJWTResponse);
  rpc RefreshJWT(RefreshJWTRequest) returns (GenerateJWTResponse);
  rpc ValidateJWT(ValidateJWTRequest) returns (ValidateJWTResponse);
}

message CreateSecretRequest {
  string client_app_id = 1;
  string secret_type = 2;
  string algorithm = 3;
}

message SecretRequest {
  string id = 1;
}

message Secret {
  string id = 1;
  string client_app_id = 2;
  string secret_type = 3;
  string algorithm = 4;
  int32 key_version = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp revoked_at = 7;
}

message ListActiveSecretsRequest {
  string client_app_id = 1;
  optional string secret_type = 2;
  optional int32 page_size = 3;
  optional int64 page_token = 4;
}

message ListSecretsResponse {
  repeated Secret secrets = 1;
  int64 next_page_token = 2;
}

message GenerateJWTRequest {
  string client_app_id = 1;
  string user_id = 2;
  optional google.protobuf.Timestamp access_token_exp = 3;
  optional google.protobuf.Timestamp refresh_token_exp = 4;
}

message ValidateJWTRequest {
  string token = 1;
}

message ValidateJWTResponse {
  bool is_valid = 1;
  string client_app_id = 2;
  string user_id = 3;
  google.protobuf.Timestamp expires_at = 4;
}

message RefreshJWTRequest {
  string refresh_token = 1;
}

message GenerateJWTResponse {
  string access_token = 1;
  string refresh_token = 2;
}
