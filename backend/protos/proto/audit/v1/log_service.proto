syntax = "proto3";

package audit.logs.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

option go_package = "audit.logs.v1";

service AuditLogService {
  // Создание записи аудита
  rpc CreateLog(CreateLogRequest) returns (Log);
  // Поиск записей аудита
  rpc SearchLogs(SearchLogsRequest) returns (SearchLogsResponse);
  // Получение записи по ID
  rpc GetLog(GetLogRequest) returns (Log);
}

message Log {
  int64 id = 1;
  int32 action_id = 2;
  string event_source = 3;
  string event_type = 4;
  string status = 5;
  string actor_id = 6;       // UUID в формате string
  string target_id = 7;      // UUID в формате string
  string client_id = 8;      // UUID в формате string
  string ip_address = 9;     // IP в формате string "192.168.1.1"
  string user_agent = 10;
  google.protobuf.Struct event_data = 11;
  google.protobuf.Timestamp created_at = 12;
}

message CreateLogRequest {
  int32 action_id = 1;
  string event_source = 2;
  string event_type = 3;
  string status = 4;
  string actor_id = 5;
  string target_id = 6;
  string client_id = 7;
  string ip_address = 8;
  string user_agent = 9;
  google.protobuf.Struct event_data = 10;
}

message GetLogRequest {
  int64 log_id = 1;
}

message SearchLogsRequest {
  optional int32 action_id = 1;
  optional string event_source = 2;
  optional string event_type = 3;
  optional string status = 4;
  optional string actor_id = 5;
  optional string target_id = 6;
  optional string client_id = 7;
  optional string ip_address = 8;
  optional google.protobuf.Struct event_data_filter = 9;
  google.protobuf.Timestamp created_from = 10;
  google.protobuf.Timestamp created_to = 11;

  // Пагинация
  int32 page_size = 12;
  string page_token = 13;

  // Сортировка
  enum SortField {
    ID = 0;
    CREATED_AT = 1;
  }
  SortField sort_field = 14;
  bool sort_descending = 15;
}

message SearchLogsResponse {
  repeated Log logs = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}